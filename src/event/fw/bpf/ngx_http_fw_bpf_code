/* AUTO-GENERATED, DO NOT EDIT. */

#include <stddef.h>
#include <stdint.h>

#include "ngx_bpf.h"


static ngx_bpf_reloc_t bpf_reloc_prog_ngx_http_fw[] = {
    { "buf", 81 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "_license", 1 },
    { "buf", 2 },
    { "ngx_http_fw", 5 },
    { "ngx_http_fw", 6 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "buf", 161 },
    { "_license", 164 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "ngx_http_fw", 8 },
    { "ngx_http_fw", 48 },
    { "ngx_http_fw", 50 },
    { "ngx_http_fw", 52 },
    { "ngx_http_fw", 54 },
    { "ngx_http_fw", 56 },
    { "ngx_http_fw", 58 },
    { "ngx_http_fw", 60 },
    { "ngx_http_fw", 62 },
    { "ngx_http_fw", 64 },
    { "ngx_http_fw", 66 },
    { "ngx_http_fw", 68 },
    { "ngx_http_fw", 70 },
    { "ngx_http_fw", 72 },
    { "ngx_http_fw", 74 },
    { "ngx_http_fw", 76 },
    { "ngx_http_fw", 78 },
    { "ngx_http_fw", 80 },
    { "ngx_http_fw", 82 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "ngx_http_fw", 9 },
    { "FOR", 0 },
    { "VALUE", 0 },
    { "ngx_http_fw", 42 },
};

static struct bpf_insn bpf_insn_prog_ngx_http_fw[] = {
    /* opcode dst          src         offset imm */
    { 0xbf,   BPF_REG_6,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0xa },
    { 0x71,   BPF_REG_1,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0xb },
    { 0x71,   BPF_REG_2,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0x4f,   BPF_REG_2,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x6b,  BPF_REG_10,   BPF_REG_2, (int16_t)  65532,        0x0 },
    { 0xb7,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0x7 },
    { 0x71,   BPF_REG_1,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x6 },
    { 0x71,   BPF_REG_2,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x4f,   BPF_REG_1,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0x71,   BPF_REG_2,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,        0x9 },
    { 0x71,   BPF_REG_3,   BPF_REG_3, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0x4f,   BPF_REG_3,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,       0x10 },
    { 0x4f,   BPF_REG_3,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x63,  BPF_REG_10,   BPF_REG_3, (int16_t)  65528,        0x0 },
    { 0xb7,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0x5 },
    { 0x71,   BPF_REG_1,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x4 },
    { 0x71,   BPF_REG_2,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x4f,   BPF_REG_1,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x6b,  BPF_REG_10,   BPF_REG_1, (int16_t)  65524,        0x0 },
    { 0xb7,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0x1 },
    { 0x71,   BPF_REG_1,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x71,   BPF_REG_2,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x4f,   BPF_REG_1,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x2 },
    { 0x71,   BPF_REG_2,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,        0x3 },
    { 0x71,   BPF_REG_3,   BPF_REG_3, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,        0x8 },
    { 0x4f,   BPF_REG_3,   BPF_REG_2, (int16_t)      0,        0x0 },
    { 0x67,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,       0x10 },
    { 0x4f,   BPF_REG_3,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x63,  BPF_REG_10,   BPF_REG_3, (int16_t)  65520,        0x0 },
    { 0xbf,   BPF_REG_3,  BPF_REG_10, (int16_t)      0,        0x0 },
    {  0x7,   BPF_REG_3,   BPF_REG_0, (int16_t)      0, 0xfffffff0 },
    { 0xbf,   BPF_REG_1,   BPF_REG_6, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x6 },
    { 0xb7,   BPF_REG_4,   BPF_REG_0, (int16_t)      0,        0x6 },
    { 0xb7,   BPF_REG_5,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x85,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x9 },
    { 0xbf,   BPF_REG_3,  BPF_REG_10, (int16_t)      0,        0x0 },
    {  0x7,   BPF_REG_3,   BPF_REG_0, (int16_t)      0, 0xfffffff8 },
    { 0xbf,   BPF_REG_1,   BPF_REG_6, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_4,   BPF_REG_0, (int16_t)      0,        0x6 },
    { 0xb7,   BPF_REG_5,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x85,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x9 },
    { 0xb7,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,       0x1a },
    { 0x61,   BPF_REG_1,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x63,  BPF_REG_10,   BPF_REG_1, (int16_t)  65528,        0x0 },
    { 0xb7,   BPF_REG_1,   BPF_REG_0, (int16_t)      0,       0x1e },
    { 0x61,   BPF_REG_1,   BPF_REG_1, (int16_t)      0,        0x0 },
    { 0x63,  BPF_REG_10,   BPF_REG_1, (int16_t)  65520,        0x0 },
    { 0xbf,   BPF_REG_3,  BPF_REG_10, (int16_t)      0,        0x0 },
    {  0x7,   BPF_REG_3,   BPF_REG_0, (int16_t)      0, 0xfffffff0 },
    { 0xbf,   BPF_REG_1,   BPF_REG_6, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,       0x1a },
    { 0xb7,   BPF_REG_4,   BPF_REG_0, (int16_t)      0,        0x4 },
    { 0xb7,   BPF_REG_5,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x85,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x9 },
    { 0xbf,   BPF_REG_3,  BPF_REG_10, (int16_t)      0,        0x0 },
    {  0x7,   BPF_REG_3,   BPF_REG_0, (int16_t)      0, 0xfffffff8 },
    { 0xbf,   BPF_REG_1,   BPF_REG_6, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,       0x1e },
    { 0xb7,   BPF_REG_4,   BPF_REG_0, (int16_t)      0,        0x4 },
    { 0xb7,   BPF_REG_5,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x85,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x9 },
    { 0xbf,   BPF_REG_1,   BPF_REG_6, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x18,   BPF_REG_3,   BPF_REG_0, (int16_t)      0,        0x0 },
    {  0x0,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0xb7,   BPF_REG_4,   BPF_REG_0, (int16_t)      0,      0x200 },
    { 0xb7,   BPF_REG_5,   BPF_REG_0, (int16_t)      0,        0x1 },
    { 0x85,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x9 },
    { 0x61,   BPF_REG_1,   BPF_REG_6, (int16_t)     40,        0x0 },
    { 0xb7,   BPF_REG_2,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x85,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,       0x17 },
    { 0xb7,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x0 },
    { 0x95,   BPF_REG_0,   BPF_REG_0, (int16_t)      0,        0x0 },
};


ngx_bpf_program_t ngx_http_fw = {
    .relocs = bpf_reloc_prog_ngx_http_fw,
    .nrelocs = sizeof(bpf_reloc_prog_ngx_http_fw)
               / sizeof(bpf_reloc_prog_ngx_http_fw[0]),
    .ins = bpf_insn_prog_ngx_http_fw,
    .nins = sizeof(bpf_insn_prog_ngx_http_fw)
            / sizeof(bpf_insn_prog_ngx_http_fw[0]),
    .license = "BSD",
    .type = BPF_PROG_TYPE_SK_REUSEPORT,
};

